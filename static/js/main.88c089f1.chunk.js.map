{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["Form","setInputText","todos","setTodos","inputText","setStatus","value","onChange","e","console","log","target","type","className","onClick","preventDefault","text","completed","id","Math","random","name","Todo","todo","map","item","filter","el","TodoList","filteredTodos","App","useState","status","setFilteredTodos","useEffect","getLocalTodos","filterHandler","saveLocalTools","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.88c089f1.chunk.js","sourcesContent":["const Form = ({setInputText, todos, setTodos, inputText, setStatus}) => {\r\n    const inputTextHandler = (e) =>  {\r\n        console.log(e.target.value);\r\n        setInputText(e.target.value);\r\n    };\r\n    const submitTodoHandler = (e) => {\r\n        //Prevent Default to avoild refresh and keep input values\r\n        e.preventDefault();\r\n        setTodos([\r\n            //This explain: If I have Todos already in the list, just pass it. Take the information in input and add id and incompleted\r\n            ...todos, {text: inputText, completed: false, id: Math.random() * 1000}\r\n        ]);\r\n        //Add blank value again to reset without refresh\r\n        setInputText('');\r\n    };\r\n\r\n    const statusHandler = (e) => {\r\n        setStatus(e.target.value);\r\n    };\r\n\r\n    return(\r\n        <form>\r\n            <input value={inputText} \r\n            onChange={inputTextHandler} \r\n            type=\"text\" \r\n            className=\"todo-input\" \r\n            />\r\n            <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\r\n                <i className=\"fas fa-plus-square\"></i>\r\n            </button>\r\n            <div className=\"select\">\r\n                <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\r\n                    <option value=\"all\">All</option>\r\n                    <option value=\"completed\">Completed</option>\r\n                    <option value=\"uncompleted\">Uncompleted</option>\r\n                </select>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Form;","const Todo = ({ text, todo, todos, setTodos }) =>{\r\n    //Events\r\n    const deleteHandler = () => {\r\n        setTodos(todos.filter((el) => el.id !== todo.id));\r\n    };\r\n    const completeHandler = () => {\r\n        setTodos(\r\n            todos.map(item => {\r\n                if(item.id === todo.id){\r\n                    return {\r\n                        ...item, completed: !item.completed\r\n                    };\r\n                }\r\n                return item;\r\n            })\r\n        );\r\n    };\r\n\r\n    return(\r\n        <div className=\"todo\">\r\n            <li className={`todo-item ${todo.completed ? \"completed\": ''}`}>{text}</li>\r\n            <button onClick={completeHandler}className=\"complete-btn\">\r\n                <i className=\"fas fa-check\"></i>\r\n            </button>\r\n            <button onClick={deleteHandler} className=\"trash-btn\"><i className=\"fas fa-trash\"></i></button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Todo;","//Components\r\nimport Todo from './Todo';\r\n\r\nconst TodoList = ({ todos, setTodos, filteredTodos }) =>{\r\n    return(\r\n        <div className=\"todo-container\">\r\n            <ul className=\"todo-list\">\r\n                {filteredTodos.map(todo => (\r\n                    <Todo \r\n                    setTodos={setTodos} \r\n                    todos={todos}\r\n                    key={todo.id} \r\n                    todo={todo}\r\n                    text={todo.text}\r\n                    />\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoList;","import React, {useState, useEffect} from 'react';\nimport './App.css';\n\n//Importing Components\nimport Form from './components/Form';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  //States\n  const [inputText, setInputText] = useState (\"\");\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState('all');\n  const [filteredTodos, setFilteredTodos] = useState([]);\n\n  //RUN ONCE when the app starts\n useEffect(() => {\n   getLocalTodos();\n }, []);\n\n  //Use Effect\n  useEffect(()=>{\n    filterHandler();\n    saveLocalTools();\n  }, [todos,status]);\n\n  //Functions\n  const filterHandler = () => {\n    switch(status){\n      case 'completed':\n        setFilteredTodos(todos.filter(todo => todo.completed === true))\n        break;\n      case 'uncompleted':\n        setFilteredTodos(todos.filter(todo => todo.completed === false))\n        break;\n      default:\n        setFilteredTodos(todos);\n        break;\n    }\n  };\n\n// Save to Local\nconst saveLocalTools = () => {\n  localStorage.setItem('todos', JSON.stringify(todos));\n};\n\nconst getLocalTodos = () => {\n  if (localStorage.getItem('todos') === null) {\n    localStorage.setItem('todos', JSON.stringify([]));\n  } else {\n    let todoLocal = JSON.parse(localStorage.getItem('todos'));\n    setTodos(todoLocal);\n  }\n};\n\nreturn (\n    <div>\n     <header>\n       <h1>ToDo List</h1>\n     </header>\n     <Form \n     inputText={inputText}\n     todos={todos} \n     setTodos={setTodos} \n     setInputText={setInputText}\n     setStatus={setStatus}\n     />\n     <TodoList \n     filteredTodos={filteredTodos}\n     setTodos={setTodos} \n     todos={todos}\n     />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}